{
	"info": {
		"_postman_id": "50bce607-30fa-4ca2-8932-55ea18f4c5c0",
		"name": "Slydo Operations Documentation (Public)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2366529"
	},
	"item": [
		{
			"name": "Anonymous Shopping Cart",
			"item": [
				{
					"name": "Initializes shopping cart by merchantUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var cartToken = jsonData.cart_key; // Set cart_key as cartToken to authorize cart",
									"var cartId = jsonData.id; // Set id as cartId to use cart",
									"pm.globals.set(\"cartKey\", cartToken);",
									"pm.globals.set(\"cartId\", cartId);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body payload has keys (id, cart_key, cart_items)\", function () {",
									"    pm.expect(jsonData).to.have.all.keys('id', 'cart_key', 'cart_items');",
									"});",
									"",
									"pm.test(\"cart_items is an object\", function () {",
									"    pm.expect(jsonData.cart_items).to.be.an('object');",
									"});",
									"",
									"pm.test(\"cart_items is empty\", () => {",
									"    pm.expect(jsonData.cart_items).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/anonymous-shopping-cart/create-anonymous-cart/:merchantUsername/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"anonymous-shopping-cart",
								"create-anonymous-cart",
								":merchantUsername",
								""
							],
							"variable": [
								{
									"key": "merchantUsername",
									"value": "{{cart_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Body payload contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys(\"count\", \"next\", \"previous\", \"results\");",
									"});",
									"",
									"pm.test(\"Results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							},
							{
								"key": "Authorization",
								"value": "Basic {{cartKey}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/anonymous-shopping-cart/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"anonymous-shopping-cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns cart details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body payload contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys('id', 'cart_items', 'status', 'qr_code', 'total_price', 'shipping_price', 'subtotal')",
									"});",
									"",
									"pm.test(\"id is correct\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"cartId\"));",
									"});",
									"",
									"pm.test(\"cart_items is object\", function () {",
									"    pm.expect(jsonData.cart_items).to.be.an('object')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							},
							{
								"key": "Authorization",
								"value": "Basic {{cartKey}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/anonymous-shopping-cart/:cartId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"anonymous-shopping-cart",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adds item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							},
							{
								"key": "Authorization",
								"value": "Basic {{cartKey}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/anonymous-shopping-cart/add-item/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"anonymous-shopping-cart",
								"add-item",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns cart status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body payload contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys('id', 'status', 'qr_code', 'total_price', 'shipping_price', 'subtotal', 'merchant')",
									"});",
									"",
									"pm.test(\"id is correct\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"cartId\"));",
									"});",
									"",
									"pm.test(\"merchant is object\", function () {",
									"    pm.expect(pm.response.json().merchant).to.be.an('object')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{cartKey}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/anonymous-shopping-cart/status/:cartId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"anonymous-shopping-cart",
								"status",
								":cartId",
								""
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Checkout payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys([\"id\", \"status\", \"qr_code\", \"total_price\", \"shipping_price\", \"subtotal\", \"merchant\"])",
									"});",
									"",
									"pm.test(\"merchant is object\", function () {",
									"    pm.expect(pm.response.json().merchant).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/anonymous-shopping-cart/check-out-payment/:cartId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"anonymous-shopping-cart",
								"check-out-payment",
								":cartId",
								""
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clears cart items by cartId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body payload contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys('id', 'status', 'qr_code', 'total_price', 'shipping_price', 'subtotal', 'merchant')",
									"});",
									"",
									"pm.test(\"id is correct\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"cartId\"));",
									"});",
									"",
									"pm.test(\"merchant is object\", function () {",
									"    pm.expect(pm.response.json().merchant).to.be.an('object')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{cartKey}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/anonymous-shopping-cart/clear-cart/:cartId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"anonymous-shopping-cart",
								"clear-cart",
								":cartId",
								""
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Removes a single cart item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{cartKey}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/anonymous-shopping-cart/remove-item/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"anonymous-shopping-cart",
								"remove-item",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var authToken = jsonData.access;",
									"var refreshToken = jsonData.refresh;",
									"",
									"pm.globals.set(\"refreshToken\", refreshToken);",
									"pm.globals.set(\"accessToken\", authToken);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"refresh\", \"access\", \"user\"])",
									"",
									"});",
									"",
									"pm.test(\"User is object\", function () {",
									"    pm.expect(jsonData.user).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "DeviceType",
								"value": "WEB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone_number\": \"+353899999999\",\n    \"password\":\"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/auth/get-token/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth",
								"get-token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh access token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"refreshToken = pm.globals.get(\"refreshToken\");",
									"",
									"pm.environment.set(\"refreshToken\", refreshToken);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var authToken = jsonData.access;",
									"pm.globals.set(\"accessToken\", authToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"access\"])",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "DeviceType",
								"value": "WEB",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/auth/refresh-token/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth",
								"refresh-token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"",
									"pm.test('Request payload is object', function (){",
									"    pm.expect(pm.request.body).to.be.an('object')",
									"});",
									"",
									"pm.test('Request payload not empty', function (){",
									"    pm.expect(pm.request.body).to.be.not.empty",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"refresh\", \"access\", \"user\"])",
									"",
									"});",
									"",
									"pm.test(\"User is object\", function () {",
									"    pm.expect(jsonData.user).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"old_password\": \"123456\",\n    \"new_password1\": \"123456\",\n    \"new_password2\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/change-password/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"change-password",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"",
									"pm.test('Body not empty', function (){",
									"    pm.expect(jsonData).to.be.not.empty",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"message\"])",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/auth/check-access/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth",
								"check-access",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"",
									"pm.test('Body not empty', function (){",
									"    pm.expect(jsonData).to.be.not.empty",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"message\"])",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/auth/logout/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth",
								"logout",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"",
									"pm.test('Request payload is object', function (){",
									"    pm.expect(pm.request.body).to.be.an('object')",
									"});",
									"",
									"pm.test('Request payload not empty', function (){",
									"    pm.expect(pm.request.body).to.be.not.empty",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"refresh\", \"access\", \"user\"])",
									"",
									"});",
									"",
									"pm.test(\"User is object\", function () {",
									"    pm.expect(jsonData.user).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/auth/password-reset/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth",
								"password-reset",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset user device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var authToken = jsonData.access;",
									"pm.globals.set(\"accessToken\", authToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"access\"])",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/reset-user-device/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"reset-user-device",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "### Authentication\nSlydo authenticates your API requests using your partner specific `slydo-auth-token`. To use any Slydo API, you must include this header with each request. If you do not include the token when making an API request, or use a token that is incorrect or invalid, you will receive an error response.\n\n#### Protecting your API tokens\n\n* Do not store API tokens inside your applications source control: If you store API tokens in property or configuration files, keep these files outside your source control systems. This is especially important if you use a public source code management system such as GitHub. You may want to rely on environment variables or similar runtime injection techniques rather than keeping sensitive keys on disk.\n\n* Do not embed API keys directly in code: Instead of embedding API keys in your application's code, put them in environment variables or include files that are stored separately from the bulk of your code – outside the source repository of your application.\n\n* Limit employee access to production API keys: While keys to access our sandbox environment will likely be shared by many developers, access to production keys (when provided) should be limited to only necessary personnel."
		},
		{
			"name": "App Settings",
			"item": [
				{
					"name": "Returns app settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/app-settings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"app-settings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bank Account",
			"item": [
				{
					"name": "Returns list of bank accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/bank-accounts-list/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"bank-accounts-list",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create bank account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"id\", \"customer_username\", \"account_name\", \"account_number\", \"is_default\", \"bank\"])",
									"});",
									"",
									"pm.test(\"bank is object\", function () {",
									"    pm.expect(jsonData.bank).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer_username\": \"abiola.rasheed.2\",\n    \"account_name\": \"Abiola Rasheed\",\n    \"account_number\": 1246675778,\n    \"bank\": \"first-bank-nigeria-limited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/add-bank-account/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"add-bank-account",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Set default bank account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"id\", \"customer_username\", \"account_name\", \"account_number\", \"is_default\", \"bank\"])",
									"});",
									"",
									"pm.test(\"bank is object\", function () {",
									"    pm.expect(jsonData.bank).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/set-default-bank-account/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"set-default-bank-account",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "72"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete bank account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/delete-bank-account/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"delete-bank-account",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "92"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify bank account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"account_name\", \"account_number\"])",
									"});",
									"",
									"pm.test(\"bank is object\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"account_name\": \"Abiola Rasheed\",\n   \"account_number\": \"1246675778\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/verify-bank-account/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"verify-bank-account",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify bank is Slydo registered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"account_name\", \"account_number\"])",
									"});",
									"",
									"pm.test(\"bank is object\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/verify-bank-account-is-slydo-registered/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"verify-bank-account-is-slydo-registered",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Slydo bank account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"id\", \"customer_username\", \"account_name\", \"account_number\", \"is_default\", \"bank\"])",
									"});",
									"",
									"pm.test(\"bank is object\", function () {",
									"    pm.expect(jsonData.bank).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/create-slydo-bank-account/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"create-slydo-bank-account",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Add virtual account info to Slydo account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"id\", \"customer_username\", \"account_name\", \"account_number\", \"is_default\", \"bank\"])",
									"});",
									"",
									"pm.test(\"bank is object\", function () {",
									"    pm.expect(jsonData.bank).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/add-virtual-account-info-to-slydo_account/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"add-virtual-account-info-to-slydo_account",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Credit Slydo account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"id\", \"customer_username\", \"account_name\", \"account_number\", \"is_default\", \"bank\"])",
									"});",
									"",
									"pm.test(\"bank is object\", function () {",
									"    pm.expect(jsonData.bank).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/credit-slydo-account/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"credit-slydo-account",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get virtual account info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"account_number\", \"financial_institution\", \"account_tier\", \"account_name\",  \"customer_username\", \"is_active\", \"created_at\", \"updated_at\", \"note\"])",
									"});",
									"",
									"pm.test(\"financial_institution is object\", function () {",
									"    pm.expect(jsonData.financial_institution).to.be.an(\"object\")",
									"});",
									"",
									"pm.test(\"account_tier is object\", function () {",
									"    pm.expect(jsonData.account_tier).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/get-virtual-account-info/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"get-virtual-account-info",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Chat",
			"item": [
				{
					"name": "Return list of group conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create group conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"participants is array\", function () {",
									"    pm.expect(jsonData.participants).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "d7681d4c-a78a-4d57-8a41-c1f9412ea07a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Make user group admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"black\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/add-admin-user/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"add-admin-user",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "d7681d4c-a78a-4d57-8a41-c1f9412ea07a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"yusufmusa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/add-user/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"add-user",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "b5901332-3931-4e58-98e7-deccd1228f3c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Block group participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/block-participants/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"block-participants",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/delete-group/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"delete-group",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "4ab29df0-9602-4e4f-80ae-fbac3c6739b4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return detailed group info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"participants is array\", function () {",
									"    pm.expect(jsonData.participants).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/detail/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"detail",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "d7681d4c-a78a-4d57-8a41-c1f9412ea07a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exit group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/exit-group/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"exit-group",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "98758171-3db6-4f1b-a2a9-217aec70ae0f"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return group details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/group_detail/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"group_detail",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Mute group participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/mute-participant/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"mute-participant",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "4ab29df0-9602-4e4f-80ae-fbac3c6739b4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove group admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/remove-admin-user/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"remove-admin-user",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "4ab29df0-9602-4e4f-80ae-fbac3c6739b4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user from group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/remove-user/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"remove-user",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "4ab29df0-9602-4e4f-80ae-fbac3c6739b4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for group participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/search-participants/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"search-participants",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "d7681d4c-a78a-4d57-8a41-c1f9412ea07a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search user contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/search-user-contacts/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"search-user-contacts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Search participants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/search_participants/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"search_participants",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Unblock group participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/unblock-participants/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"unblock-participants",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "4ab29df0-9602-4e4f-80ae-fbac3c6739b4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unmute group participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/group-conversation/unmute-participant/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"group-conversation",
								"unmute-participant",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "4ab29df0-9602-4e4f-80ae-fbac3c6739b4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create media message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Hello\",\n    \"conversation_id\": \"82cad539-b11a-4cd7-abe2-089fc426a1d3\",\n    \"check_id\": \"82cad666-b11a-4cd7-abe2-089fc426a1d3\",\n    \"author\": \"black\",\n    // \"media\": \"\",\n    \"type\": \"chatroom_message\",\n    \"kind\": \"chatroom_message\"\n    // \"meta_data\": \"\"\n}\n\n            ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/chat/create-chat-message/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"chat",
								"create-chat-message",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Hello\",\n    \"conversation\": \"82cad539-b11a-4cd7-abe2-089fc426a1d3\",\n    \"check_id\": \"82cad666-b11a-4cd7-abe2-089fc426a1d3\",\n    \"author\": \"black\",\n    // \"media\": \"\",\n    \"type\": \"chatroom_message\",\n    \"kind\": \"chatroom_message\"\n    // \"meta_data\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/chat/create/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"chat",
								"create",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Returns list of comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/comments/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a comment to post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body not empty\", function () {",
									"    pm.expect(jsonData).to.be.not.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"Insane. This is a comment that I added on this post to test Slydo's comment endpoints. The comments require 150 characters. Can be add to get all of them all the time.\",\n    \"author_username\": \"abiola.rasheed.2\",\n    \"post\": \"959b59b4-31d8-4fdd-b338-80b82d3195b0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/comments/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.be.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/comments/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"comments",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "0b36a891-8bb9-4d9d-ac06-2a1f108ac245"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.be.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/comments/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"comments",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "26559305-8c78-4f12-9b3b-31493af0f968"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/comments/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"comments",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "26559305-8c78-4f12-9b3b-31493af0f968"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Dislike comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.be.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/comments/dislike/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"comments",
								"dislike",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "0b36a891-8bb9-4d9d-ac06-2a1f108ac245"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns number of dislikes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.be.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/comments/dislikes-count/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"comments",
								"dislikes-count",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "0b36a891-8bb9-4d9d-ac06-2a1f108ac245"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Like comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.be.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/comments/like/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"comments",
								"like",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "0b36a891-8bb9-4d9d-ac06-2a1f108ac245"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns number of likes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.be.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/comments/likes-count/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"comments",
								"likes-count",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "0b36a891-8bb9-4d9d-ac06-2a1f108ac245"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.be.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/comments/post/:post_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"comments",
								"post",
								":post_id",
								""
							],
							"variable": [
								{
									"key": "post_id",
									"value": "959b59b4-31d8-4fdd-b338-80b82d3195b0"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Contact & Connections",
			"item": [
				{
					"name": "Send contact request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body payload is array', function () {",
									"    pm.expect(pm.response.json()).to.be.an('array')",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_user\": \"abiola.rasheed.2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contact-request/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contact-request",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of contact requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('count', 'next', 'previous', 'results')",
									"});",
									"",
									"pm.test('results has object', function (){",
									"    pm.expect(pm.response.json().results[0]).is.an('object')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contact-request/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contact-request",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve contact request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contact-request/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contact-request",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "580"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept contact request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"yusufmusa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contact-request/accept/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contact-request",
								"accept",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous', 'results')",
									"});",
									"",
									"if (pm.expect(jsonData.results).is.not.empty) {",
									"    pm.test('results has object', function (){",
									"        pm.expect(jsonData.results[0]).is.an('object')",
									"    });",
									"",
									"    pm.test('results is not empty', function (){",
									"        pm.expect(jsonData.results).to.be.not.empty;",
									"    });",
									"} ",
									"else {",
									"    pm.test('results is empty', function (){",
									"        pm.expect(jsonData.results).is.empty;",
									"    });",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve contact by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var username = pm.request.url.path[4];",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload is object', function (){",
									"    pm.expect(pm.response.json()).is.an('object')",
									"});",
									"",
									"pm.test('Body payload is not empty', function (){",
									"    pm.expect(pm.response.json()).is.not.empty",
									"});",
									"",
									"pm.test(\"Username matches path\", function () {",
									"    pm.expect(pm.response.json().username).to.eql(username)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/connections/:userName/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"connections",
								":userName",
								""
							],
							"variable": [
								{
									"key": "userName",
									"value": "abiola.rasheed.26"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel or reject contact request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"abiola.rasheed.32\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contact-request/cancel-or-reject/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contact-request",
								"cancel-or-reject",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check-in request contact request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_user\": \"alex.rasheed.8\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contact-request/check-in-request/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contact-request",
								"check-in-request",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check-in contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"checker\": \"abiola.rasheed.2\", \n    \"user\": \"tosinmomodu\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/check-in-contact/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								"check-in-contact",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Return conversation ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is object\", function () {",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contact\": \"black\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/get-conversation-id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								"get-conversation-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove a contact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"yusufmusa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/remove-from-contact/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								"remove-from-contact",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Block a contact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"slydo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/block-contact/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								"block-contact",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Unblock a contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('count', 'next', 'previous', 'results')",
									"});",
									"",
									"pm.test('results is not empty', function (){",
									"    pm.expect(pm.response.json().results).to.be.not.empty;",
									"});",
									"",
									"pm.test('results has object', function (){",
									"    pm.expect(pm.response.json().results[0]).is.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"slydo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/list-block-contact/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								"list-block-contact",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of blocked contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('count', 'next', 'previous', 'results')",
									"});",
									"",
									"pm.test('results is not empty', function (){",
									"    pm.expect(pm.response.json().results).to.be.not.empty;",
									"});",
									"",
									"pm.test('results has object', function (){",
									"    pm.expect(pm.response.json().results[0]).is.an('object');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/list-block-contact/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								"list-block-contact",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Credit Card",
			"item": [
				{
					"name": "Returns list of credit cards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/credit-card/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"credit-card",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Add credit card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"card_number\": \"838353\",\n    \"expiry_date\": \"2023-12-06\",\n    \"ccv\": \"332\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/credit-card/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"credit-card",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get credit card details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is not empty\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/credit-card/:pk/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"credit-card",
								":pk",
								""
							],
							"variable": [
								{
									"key": "pk",
									"value": "16"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update credit card details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is not empty\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/credit-card/:pk/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"credit-card",
								":pk",
								""
							],
							"variable": [
								{
									"key": "pk",
									"value": "16"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete credit card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is not empty\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/credit-card/:pk/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"credit-card",
								":pk",
								""
							],
							"variable": [
								{
									"key": "pk",
									"value": "16"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Credit wallet account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is not empty\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"card_number\": \"838353\",\n    \"expiry_date\": \"2023-12-06\",\n    \"ccv\": \"332\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/credit-card/credit-wallet-account/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"credit-card",
								"credit-wallet-account",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify card OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is not empty\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/credit-card/verify-card-otp/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"credit-card",
								"verify-card-otp",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Verified OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is not empty\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/credit-card/verify-card/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"credit-card",
								"verify-card",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Developer",
			"item": [
				{
					"name": "Creates webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('event', 'url', 'id')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event\": \"payment-request-created\",\n    \"url\": \"https://googles.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/webhook/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"webhook",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of webhooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/webhook/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"webhook",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('event', 'url', 'id')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/webhook/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"webhook",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('event', 'url', 'id')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/webhook/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"webhook",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/webhook/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"webhook",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get developer auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have token', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('token')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/developer-auth-token/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"developer-auth-token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create developer auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have token', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('token')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/developer-auth-token/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"developer-auth-token",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Envelops",
			"item": [
				{
					"name": "Returns list of magic envelops",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/magic-envelop/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"magic-envelop",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Send magic envelop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"message\"])",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_customer\": \"black\",\n    \"to_customer\": \"abiola.rasheed.2\",\n    \"amount\": 61090,\n    \"conversation_id\": \"e69675b4-91d8-4be4-85c7-ad05029629fd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/magic-envelop/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"magic-envelop",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve magic envelop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/magic-envelop/:id?message_id=e69675b4-91d8-4be4-85c7-ad05029629fd",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"magic-envelop",
								":id"
							],
							"query": [
								{
									"key": "message_id",
									"value": "e69675b4-91d8-4be4-85c7-ad05029629fd"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "270"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of empty envelops",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.have.all.keys([\"count\", \"next\", \"previous\", \"results\"])",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/empty-envelop/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"empty-envelop",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve empty envelop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/empty-envelop/?message_id=e69675b4-91d8-4be4-85c7-ad05029629fd",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"empty-envelop",
								""
							],
							"query": [
								{
									"key": "message_id",
									"value": "e69675b4-91d8-4be4-85c7-ad05029629fd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel envelop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/cancel-envelop/:envelop/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"cancel-envelop",
								":envelop",
								":id",
								""
							],
							"variable": [
								{
									"key": "envelop",
									"value": "magic-envelop"
								},
								{
									"key": "id",
									"value": "270"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Inbox Messages",
			"item": [
				{
					"name": "Send message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipient\": \"abiola.rasheed.2\",\n    \"subject\": \"Slydo App Launch\",\n    \"body\": \"We're launching Slydo app today!!!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/messaging/send/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"messaging",
								"send",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipient\": \"abiola.rasheed.2\",\n    \"subject\": \"Slydo Launch\",\n    \"body\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/messaging/list/:msg_type/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"messaging",
								"list",
								":msg_type",
								""
							],
							"variable": [
								{
									"key": "msg_type",
									"value": "sent"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Read message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/messaging/read/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"messaging",
								"read",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "336f1a9e-3fbf-46c5-beeb-0677b498bf31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {",
									"    pm.response.to.have.status(204)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/messaging/delete/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"messaging",
								"delete",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "b620ee96-8769-43a9-ae38-1187d36e464d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update message action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/messaging/update/:id/:action/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"messaging",
								"update",
								":id",
								":action",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "b620ee96-8769-43a9-ae38-1187d36e464d"
								},
								{
									"key": "action",
									"value": "archive"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Messages",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/messaging/list/{action}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"messaging",
								"list",
								"{action}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Message by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/messaging/read/{message_id}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"messaging",
								"read",
								"{message_id}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Messages by Action",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/update/{message_id}/action/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"update",
								"{message_id}",
								"action",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Invoice",
			"item": [
				{
					"name": "Returns list of invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_customer\": \"tosinmomodu\",\n    \"due_date\": \"2022-08-23\",\n    \"items\": [{\"name\": \"bread\", \"quantity\": 1, \"amount\": 150}],\n    \"invoice_date\": \"2022-08-23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get invoice details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"items is array\", function () {",
									"    pm.expect(jsonData.items).to.be.an(\"array\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_customer\": \"tosinmomodu\",\n    \"due_date\": \"2022-06-17\",\n    \"invoice_date\": \"2022-06-14\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/:invoiceId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								":invoiceId",
								""
							],
							"variable": [
								{
									"key": "invoiceId",
									"value": "63"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add item to invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"items is array\", function () {",
									"    pm.expect(jsonData.items).to.be.an(\"array\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Sweet Food\",\n    \"amount\": \"306\",\n    \"quantity\": \"1\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/:invoiceId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								":invoiceId",
								""
							],
							"variable": [
								{
									"key": "invoiceId",
									"value": "63"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark invoice as paid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/mark-as-paid/:invoiceId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								"mark-as-paid",
								":invoiceId",
								""
							],
							"variable": [
								{
									"key": "invoiceId",
									"value": "63"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {",
									"    pm.response.to.have.status(204)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Paid\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/:invoiceId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								":invoiceId",
								""
							],
							"variable": [
								{
									"key": "invoiceId",
									"value": "66"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get invoice item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/item/:item_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								"item",
								":item_id",
								""
							],
							"variable": [
								{
									"key": "item_id",
									"value": "73"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update invoice item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Invoice name\",\n    \"currency\": \"NGN\",\n    \"amount\": 100,\n    \"quantity\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/item/:item_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								"item",
								":item_id",
								""
							],
							"variable": [
								{
									"key": "item_id",
									"value": "73"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete invoice item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {",
									"    pm.response.to.have.status(204)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/item/:item_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								"item",
								":item_id",
								""
							],
							"variable": [
								{
									"key": "item_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/download/:invoiceId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								"download",
								":invoiceId",
								""
							],
							"variable": [
								{
									"key": "invoiceId",
									"value": "63"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pay for invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/invoice/pay/:invoiceId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"invoice",
								"pay",
								":invoiceId",
								""
							],
							"variable": [
								{
									"key": "invoiceId",
									"value": "63"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "KYC Compliance",
			"item": [
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var auth_token = jsonData.token;",
									"",
									"pm.globals.set(\"auth_token\", auth_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body payload has keys ('access', 'refresh', 'user')\", function () {",
									"    pm.expect(jsonData).to.have.all.keys('token', 'user');",
									"});",
									"",
									"pm.test(\"user is an object\", function () {",
									"    pm.expect(jsonData.user).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"+2348011111111\",\n\"password\":\"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/kyc-compliance/auth/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"kyc-compliance",
								"auth",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Onboarded Users List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Devicetype",
								"value": "PS",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"identity_result\": \"clear\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/kyc-compliance/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"kyc-compliance",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Onboarded",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Devicetype",
								"value": "PS",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"identity_result\": \"clear\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/kyc-compliance/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"kyc-compliance",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "101"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Single Onboarded user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Devicetype",
								"value": "PS",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bvn_number_result\": \"valid\",\n    \"identity_result\": \"clear\",\n    \"verification_note\": \"This has been checked\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/kyc-compliance/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"kyc-compliance",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "134"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Onboarded Users Aggregation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Devicetype",
								"value": "PS",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"identity_result\": \"clear\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/kyc-compliance/stats-board/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"kyc-compliance",
								"stats-board",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Merchant",
			"item": [
				{
					"name": "Get merchant store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/customer/:merchant_username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"customer",
								":merchant_username"
							],
							"variable": [
								{
									"key": "merchant_username",
									"value": "abiola.rasheed.2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return account balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/check-account-balance/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"check-account-balance",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Moments",
			"item": [
				{
					"name": "Get friends with active moments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('count', 'next', 'previous', 'results')",
									"});",
									"",
									"pm.test('results has object', function (){",
									"    pm.expect(pm.response.json().results[0]).is.an('object')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a moment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys([\"id\", \"media_type\", \"avatar\", \"owner_name\", \"media\", \"gif\", \"text\", \"owner\", \"created_at\", \"expire_at\", \"is_public\", \"social_likes\", \"social_dislikes\"])",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "media",
									"type": "file",
									"src": "/Users/RichesofGod/Downloads/41MOEFEt3eL._AC_.jpg"
								},
								{
									"key": "text",
									"value": "I love Disney",
									"type": "text"
								},
								{
									"key": "is_public",
									"value": "true",
									"type": "default"
								},
								{
									"key": "expire_at",
									"value": "false",
									"type": "default",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "[\"disney\"]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a user's moments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('owner_name', 'owner', 'avatar', 'moments')",
									"});",
									"",
									"pm.test('moments has object', function (){",
									"    pm.expect(pm.response.json().moments[0]).is.an('object')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/user/:username/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"user",
								":username",
								""
							],
							"variable": [
								{
									"key": "username",
									"value": "black"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Explore public moments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('count', 'next', 'previous', 'results')",
									"});",
									"",
									"pm.test('results has object', function (){",
									"    pm.expect(pm.response.json().results[0]).is.an('object')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/explore/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"explore",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a user's public moments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body payload have keys', function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('owner_name', 'owner', 'avatar', 'moments')",
									"});",
									"",
									"pm.test('moments has object', function (){",
									"    pm.expect(pm.response.json().moments[0]).is.an('object')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/public/:username/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"public",
								":username",
								""
							],
							"variable": [
								{
									"key": "username",
									"value": "abiola.rasheed.19"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a moment",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "ce70f377-2f84-42e0-a581-fba62931cf28"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a moment",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "f211c89d-cfdb-4cb1-8e50-b9d683b165f7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup moment",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/search/?q=wild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"search",
								""
							],
							"query": [
								{
									"key": "q",
									"value": "wild"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"This is peak performance\",\n    \"author_username\": \"black\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/add-comments/:momentId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"add-comments",
								":momentId",
								""
							],
							"variable": [
								{
									"key": "momentId",
									"value": "02ade438-d4eb-4244-a9ef-c5ed7c822b47"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve comments",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"This looks nice\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/comments/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"comments",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "02ade438-d4eb-4244-a9ef-c5ed7c822b47"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reply to comment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"I'm replying to this comment\",\n    \"author_username\": \"black\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/reply-comments/:moment_id/:comment_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"reply-comments",
								":moment_id",
								":comment_id",
								""
							],
							"variable": [
								{
									"key": "moment_id",
									"value": "02ade438-d4eb-4244-a9ef-c5ed7c822b47"
								},
								{
									"key": "comment_id",
									"value": "9ae040f4-252f-4ff5-98c8-6cdba5ee00ce"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Like moment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/like/:pk/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"like",
								":pk",
								""
							],
							"variable": [
								{
									"key": "pk",
									"value": "5893735a-a683-4ed7-86e1-d022918d07db"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Dislike moment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/dislike/:pk/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"dislike",
								":pk",
								""
							],
							"variable": [
								{
									"key": "pk",
									"value": "5893735a-a683-4ed7-86e1-d022918d07db"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get likes count",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/like-count/:pk/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"like-count",
								":pk",
								""
							],
							"variable": [
								{
									"key": "pk",
									"value": "5893735a-a683-4ed7-86e1-d022918d07db"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get dislikes count",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/moments/dislikes-count/:pk/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"moments",
								"dislikes-count",
								":pk",
								""
							],
							"variable": [
								{
									"key": "pk",
									"value": "5893735a-a683-4ed7-86e1-d022918d07db"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Returns list of orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/order/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"order",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/order/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"order",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "35"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add note to order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"note\": \"This is a note I created on this order.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/order/:id/add-note/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"order",
								":id",
								"add-note",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "35"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Awaiting Payment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/order/:id/update-status/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"order",
								":id",
								"update-status",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "35"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get orders transaction service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orders\": [135]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/order/order-transaction-service/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"order",
								"order-transaction-service",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch orders transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orders\": 35\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/order/patch-transaction-service/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"order",
								"patch-transaction-service",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "Filter transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is object\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"object\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/transaction-filter/?week=12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"transaction-filter",
								""
							],
							"query": [
								{
									"key": "week",
									"value": "12"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Payment Contract",
			"item": [
				{
					"name": "Returns list of payment contracts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payment-contract/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payment-contract",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create payment contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payment-contract/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payment-contract",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve payment contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payment-contract/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payment-contract",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "83"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update payment contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Active\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payment-contract/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payment-contract",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "83"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete payment contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payment-contract/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payment-contract",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download payment contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payment-contract/download/:id/?download=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payment-contract",
								"download",
								":id",
								""
							],
							"query": [
								{
									"key": "download",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept payment contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payment-contract/accepted/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payment-contract",
								"accepted",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "83"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject or cancel payment contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payment-contract/reject-or-cancel/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payment-contract",
								"reject-or-cancel",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "83"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Payment Request",
			"item": [
				{
					"name": "Create payment request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['from_customer', 'to_customer', 'amount', 'notes', 'description', 'from_customer_avatar', 'to_customer_avatar', 'display_from_customer', 'display_to_customer'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_customer\": \"abiola.rasheed.2\",\n    \"from_customer\": \"black\",\n    \"amount\": 7777\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/request-payment/create/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"request-payment",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of payment request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['count', 'next', 'previous', 'results'])",
									"});",
									"",
									"pm.test(\"results is array\", function (){",
									"    pm.expect(jsonData.results).to.be.an('array')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "devicetype",
								"value": "WEB",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/request-payment/list/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"request-payment",
								"list",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update payment request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/request-payment/update/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"request-payment",
								"update",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "1103"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept payment request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1104\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/request-payment/accept/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"request-payment",
								"accept",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payouts",
			"item": [
				{
					"name": "Returns list of payouts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payout/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payout",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create payout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payout/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payout",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get payout details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payout/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payout",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "d04a85cb-1490-4150-ba5c-b2818912c9d1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update payout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/update-bank-payout/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"update-bank-payout",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "7edfd35a-1562-47f3-b6a6-3911c046c238"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Polls",
			"item": [
				{
					"name": "Returns list of polls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Creates a poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"This is a poll\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "2135d535-cc62-4695-a978-b44dc1ed9719"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"I updated this poll\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "83cd0555-7ddc-4862-a692-0dcfaefe0872"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "9b769179-89c6-45c7-8327-04602d54bdba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add choice to poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/add-choice/:poll_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								"add-choice",
								":poll_id",
								""
							],
							"variable": [
								{
									"key": "poll_id",
									"value": "2135d535-cc62-4695-a978-b44dc1ed9719"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update choice on poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/update-choice/:choice_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								"update-choice",
								":choice_id",
								""
							],
							"variable": [
								{
									"key": "choice_id",
									"value": "2135d535-cc62-4695-a978-b44dc1ed9719"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete choice from poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/delete-choice/:choice_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								"delete-choice",
								":choice_id",
								""
							],
							"variable": [
								{
									"key": "choice_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "End poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/end-poll/:poll_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								"end-poll",
								":poll_id",
								""
							],
							"variable": [
								{
									"key": "poll_id",
									"value": "2135d535-cc62-4695-a978-b44dc1ed9719"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a list of polls by group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/list-by-group/:group_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								"list-by-group",
								":group_id",
								""
							],
							"variable": [
								{
									"key": "group_id",
									"value": "43ec6152-12d2-4e1e-98bb-fa556efc92c1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a vote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/polls/vote/:poll_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"polls",
								"vote",
								":poll_id",
								""
							],
							"variable": [
								{
									"key": "poll_id",
									"value": "2135d535-cc62-4695-a978-b44dc1ed9719"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "POS",
			"item": [
				{
					"name": "Returns list of POS transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "devicetype",
								"value": "PS",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/ps/:device_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"ps",
								":device_id",
								""
							],
							"variable": [
								{
									"key": "device_id",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Make POS payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "devicetype",
								"value": "PS",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/ps/payment/:device_id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"ps",
								"payment",
								":device_id",
								""
							],
							"variable": [
								{
									"key": "device_id",
									"value": "12"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Products & Services",
			"item": [
				{
					"name": "Products",
					"item": [
						{
							"name": "Returns list of products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjU3Mjk5NTU1LCJqdGkiOiJjZDU5YTc0NThmNjg0ODFiOGRhNmRlYTZiYWNmMTgxNiIsInVzZXJfaWQiOiJibGFjayIsInVzZXIiOnsibmlja25hbWUiOiJCbGFjayBQYW50aGVyIiwicGhvbmVfbnVtYmVyIjoiKzM1Mzg3NzEyMDcwMCIsImZ1bGxfbmFtZSI6IkJsYWNrIFN0cmlrZXIgRW50ZXJwcmlzZSIsInVzZXJuYW1lIjoiYmxhY2siLCJhdmF0YXIiOiJodHRwczovL3NseWRvLWFzc2V0cy5zMy5hbWF6b25hd3MuY29tL21lZGlhL2N1c3RvbWVyL2F2YXRhci8yODA5N2VmNy0xMGJkLTQ1YmYtODQxMi0yZDVmNzI3NjY4NWYuanBnIiwicXJfY29kZSI6Imh0dHBzOi8vc2x5ZG8tYXNzZXRzLnMzLmFtYXpvbmF3cy5jb20vbWVkaWEvY3VzdG9tZXIvcXItY29kZS8xMjBiNTQxYS0yZDVlLTQ3MjctYjcyNS0yZjJjZGQ3MTQ1NTkucG5nIiwidXVpZCI6IjZiOWMxMTE4LTlkNzEtNDZkZS1iOGNhLWI0YzBkOGZjZTE3YiIsImRlZmF1bHRfY3VycmVuY3kiOiJOR04iLCJpc192ZXJpZmllZCI6ZmFsc2UsImFjY291bnRfdHlwZSI6IkRldmVsb3BlciIsInR5cGUiOiJEZXZlbG9wZXIiLCJwcm9maWxlIjp7Im5pY2tuYW1lIjoiQmxhY2sgUGFudGhlciIsIndhbGxwYXBlciI6bnVsbCwiYWRkcmVzcyI6IkxhZ29zLCBOaWdlcmlhIiwiYmlvIjoiV2UgaGVscCB5b3UgbG9vayBiZWF1dGlmdWwgYW5kIHlvdSB3aWxsIGdldCB0aGUgYmVzdCBzZXJ2aWNlcyBhbmQgcHJvZHVjdHMgZnJvbSB1cy4gR2l2ZSB1cyBhIHRyeSB0b2RheS4iLCJjb250YWN0IjoiKzk4NzQ1NjMyMTAiLCJvcGVuaW5nX2hvdXJzIjpbeyJkYXkiOiJNb25kYXkiLCJ0aW1lIjoiMTI6MDAgUE0gLSA2OjAwIFBNIn0seyJkYXkiOiJUdWVzZGF5IiwidGltZSI6IjEwOjAwIEFNIC0gNjowMCBQTSJ9LHsiZGF5IjoiV2VkbmVzZGF5IiwidGltZSI6IjEwOjAwIEFNIC0gNjowMCBQTSJ9LHsiZGF5IjoiVGh1cnNkYXkiLCJ0aW1lIjoiMTA6MDAgQU0gLSA2OjAwIFBNIn0seyJkYXkiOiJGcmlkYXkiLCJ0aW1lIjoiMTA6MDAgQU0gLSA2OjAwIFBNIn1dfSwiY29udmVyc2F0aW9uX2lkIjoiIiwicmF0aW5nIjozLjh9LCJpc3MiOiJTbHlkbyJ9.6SNfDTbveaBuWGzBWotQmczeiPM96_3MuswI3ZEQtEw",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Stylish Haircut ",
											"type": "text"
										},
										{
											"key": "short_description",
											"value": "Get your stylish haircut with us",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Get your stylish haircut with us",
											"type": "text"
										},
										{
											"key": "category",
											"value": "Beauty & Spas",
											"type": "text"
										},
										{
											"key": "condition",
											"value": "Good",
											"type": "text"
										},
										{
											"key": "price",
											"value": "70008",
											"type": "text"
										},
										{
											"key": "imagefile_0",
											"type": "file",
											"src": "/Users/RichesofGod/Downloads/bannon-morrissy-RxiAV5LC-ww-unsplash.jpg"
										},
										{
											"key": "image_count",
											"value": "1",
											"type": "text"
										}
									],
									"options": {
										"formdata": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/:id/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "3efb65d7-2ec5-4330-a994-c99ca7649034"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "July Updated Product",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/:id/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "1f2c4dab-a875-4bb5-a5d9-256147ece865"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/:id/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "8f8aa47b-2fc2-4011-b786-2d4f0d1e4063"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Returns list of merchant's products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/by-seller/:username/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"by-seller",
										":username",
										""
									],
									"variable": [
										{
											"key": "username",
											"value": "black"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Returns list of product category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/choices/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"choices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Returns list of product conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/conditions/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"conditions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/retrieve-product/:id/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"retrieve-product",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "3efb65d7-2ec5-4330-a994-c99ca7649034"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for merchant's products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/search/:username/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"search",
										":username",
										""
									],
									"variable": [
										{
											"key": "username",
											"value": "black"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve merchant's other products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/products/sellers-other-products/:username/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"sellers-other-products",
										":username",
										""
									],
									"variable": [
										{
											"key": "username",
											"value": "black"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/search/products/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"search",
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/search/products/:id/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"search",
										"products",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "b0019a1d9c5e4ee7a920393a6665a963"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Functional suggest search result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/search/products/functional_suggest/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"search",
										"products",
										"functional_suggest",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Search suggestion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/search/products/suggest/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"search",
										"products",
										"suggest",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Services",
					"item": [
						{
							"name": "Returns list of services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/services/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"services",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"WE Architecture\",\n    \"short_description\": \"Interior Architecture\",\n    \"description\": \"Interior Architecture\",\n    \"category\": \"Architect\",\n    \"price\": 1345\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/services/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"services",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/services/:id/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"services",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "a95e4df5-d8fe-414b-beb5-0fe239adb528"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Premium, Nice and tight\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/services/:id/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"services",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "a95e4df5-d8fe-414b-beb5-0fe239adb528"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/services/:id/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"services",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "5d19dc9b-7708-4545-b2d7-c7335b8b4424"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Returns list of provider's services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/services/by-provider/:username/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"services",
										"by-provider",
										":username",
										""
									],
									"variable": [
										{
											"key": "username",
											"value": "hijjabr"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Returns list of service categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/services/choices/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"services",
										"choices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Returns list of provider's other services",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/services/providers-other-services/:username/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"services",
										"providers-other-services",
										":username",
										""
									],
									"variable": [
										{
											"key": "username",
											"value": "black"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/services/retrieve-service/:id/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"services",
										"retrieve-service",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "a95e4df5-d8fe-414b-beb5-0fe239adb528"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											"",
											"pm.test(\"results is array\", function () {",
											"    pm.expect(jsonData.results).to.be.an(\"array\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/search/services/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"search",
										"services",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/search/services/:id/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"search",
										"services",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "60d5b999b8b440aaa8767b54fcee2fc9"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Functional suggest search results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/search/services/functional_suggest/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"search",
										"services",
										"functional_suggest",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Search suggestion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains keys\", function () {",
											"    pm.expect(jsonData).to.not.be.empty",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/search/services/suggest/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"search",
										"services",
										"suggest",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Returns list of images",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/images/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"images",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve an image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/images/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"images",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product or service image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/images/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"images",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for images by a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/images/search/:username/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"images",
								"search",
								":username",
								""
							],
							"variable": [
								{
									"key": "username",
									"value": "black"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Shopping Cart",
			"item": [
				{
					"name": "Returns list of cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/shopping-cart/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"shopping-cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/shopping-cart/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"shopping-cart",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "47e61469-4f2e-424e-aa35-f0db188c7dcc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/shopping-cart/add-item/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"shopping-cart",
								"add-item",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove item from cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/shopping-cart/remove-item/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"shopping-cart",
								"remove-item",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Shipping",
			"item": [
				{
					"name": "List of shipping options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/shipping-options/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"shipping-options",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create shipping option",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"price\": 5000,\n    \"name\": \"Ikeja\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/shipping-options/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"shipping-options",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get shipping option details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/shipping-options/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"shipping-options",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "56"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update shipping option",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Ogba\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/shipping-options/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"shipping-options",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "56"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete shipping option",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/shipping-options/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"shipping-options",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "56"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of public shipping options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/shipping-options/public-list/:username/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"shipping-options",
								"public-list",
								":username",
								""
							],
							"variable": [
								{
									"key": "username",
									"value": "black"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Social",
			"item": [
				{
					"name": "Creates new post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var postId = jsonData.id;",
									"",
									"pm.globals.set(\"postId\", postId);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201)",
									"});",
									"",
									"pm.test(\"Body payload is not empty\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Content-Disposition",
								"value": "inline",
								"type": "text"
							},
							{
								"key": "media",
								"value": "97b8f948-773c-489b-99cb-6ae2efbf55a8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "FIREBOY",
									"type": "text"
								},
								{
									"key": "text",
									"value": "[\"15894a71-87f8-4c39-b0ad-f116de355d92\"]",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "[]",
									"type": "default"
								},
								{
									"key": "author_username",
									"value": "yusufmusa",
									"type": "default",
									"disabled": true
								},
								{
									"key": "media",
									"value": "[\"15894a71-87f8-4c39-b0ad-f116de355d92\"]",
									"type": "text",
									"disabled": true
								},
								{
									"key": "image",
									"type": "file",
									"src": "57pD7smM2/kudaindex.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var postId = jsonData.id;",
									"",
									"pm.globals.set(\"postId\", postId);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201)",
									"});",
									"",
									"pm.test(\"Body payload is not empty\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "default"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "tags",
									"value": "[\"hair\"]",
									"type": "default"
								},
								{
									"key": "title",
									"value": "my first post",
									"type": "text"
								},
								{
									"key": "text",
									"value": "welcome to my first post",
									"type": "text"
								},
								{
									"key": "author_username",
									"value": "yusufmusa",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns post by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"",
									"pm.test(\"Body payload is not empty\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/:postId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								":postId",
								""
							],
							"variable": [
								{
									"key": "postId",
									"value": "b9cac244-38f8-426d-bbe9-e6e8371373df"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates post by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201)",
									"});",
									"",
									"pm.test(\"Body payload is not empty\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Starting An E-Commerce Business\",\n    \"tag_line\": \"This field is required.\",\n    \"text\": \"Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis.\",\n    \"is_published\": true,\n    \"enable_commenting\": true,\n    \"enable_like\": true,\n    \"published_date\": null,\n    \"filename\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/:postId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								":postId",
								""
							],
							"variable": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Like to post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'tags', 'image', 'video', 'author_avatar', 'author_name', 'read_time', 'title', 'tag_line', 'text', 'is_published', 'public_read', 'enable_commenting', 'enable_like', 'author_username', 'viewers', 'created_at', 'modified_at', 'published_date', 'likes', 'dislikes'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/like/:postId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								"like",
								":postId",
								""
							],
							"variable": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Like from post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'tags', 'image', 'video', 'author_avatar', 'author_name', 'read_time', 'title', 'tag_line', 'text', 'is_published', 'public_read', 'enable_commenting', 'enable_like', 'author_username', 'viewers', 'created_at', 'modified_at', 'published_date', 'likes', 'dislikes'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/unlike/:postId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								"unlike",
								":postId",
								""
							],
							"variable": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Dislike to post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'tags', 'image', 'video', 'author_avatar', 'author_name', 'read_time', 'title', 'tag_line', 'text', 'is_published', 'public_read', 'enable_commenting', 'enable_like', 'author_username', 'viewers', 'created_at', 'modified_at', 'published_date', 'likes', 'dislikes'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/dislike/:postId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								"dislike",
								":postId",
								""
							],
							"variable": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Dislike from post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'tags', 'image', 'video', 'author_avatar', 'author_name', 'read_time', 'title', 'tag_line', 'text', 'is_published', 'public_read', 'enable_commenting', 'enable_like', 'author_username', 'viewers', 'created_at', 'modified_at', 'published_date', 'likes', 'dislikes'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/undislike/:postId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								"undislike",
								":postId",
								""
							],
							"variable": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletes post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/:postId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								":postId"
							],
							"variable": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload inline media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'media', 'created_at'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "media",
									"type": "file",
									"src": "/Users/RichesofGod/Downloads/CristianoRonaldo - cropped.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/blog-post-inline-media-file/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								"blog-post-inline-media-file",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of posts by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['count', 'next', 'previous', 'results'])",
									"})",
									"",
									"pm.test('results is array', function () {",
									"    pm.expect(jsonData.results).to.be.an('array')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/posts/user/:userName/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"posts",
								"user",
								":userName",
								""
							],
							"variable": [
								{
									"key": "userName",
									"value": "black"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add review to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body request is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"pm.test('Body request contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['text', 'rating'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\":\"Very bad not happy with product\",\n\"rating\":2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/review/users/:userName/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"review",
								"users",
								":userName",
								""
							],
							"variable": [
								{
									"key": "userName",
									"value": "abiola.rasheed.7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of reviews of user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['can_rate', 'count', 'next', 'previous', 'results'])",
									"})",
									"",
									"pm.test('results is array', function () {",
									"    pm.expect(jsonData.results).to.be.an('array')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/review/users/:userName/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"review",
								"users",
								":userName",
								""
							],
							"variable": [
								{
									"key": "userName",
									"value": "black"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var reviewId = jsonData.results[0].id;",
									"",
									"pm.environment.set(\"reviewId\", \"reviewId\");",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['count', 'next', 'previous', 'results'])",
									"})",
									"",
									"pm.test('results is array', function () {",
									"    pm.expect(jsonData.results).to.be.an('array')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/reviews/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"reviews",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns review by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'rating', 'author_avatar', 'text', 'author_username', 'likes', 'dislikes', 'created_at', 'model_object', 'can_rate'])",
									"})",
									"",
									"pm.test('results is array', function () {",
									"    pm.expect(jsonData).to.be.an('object')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/reviews/:reviewId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"reviews",
								":reviewId",
								""
							],
							"variable": [
								{
									"key": "reviewId",
									"value": "{{reviewId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add review to product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body request is not empty', function () {",
									"    pm.expect(requestBody).is.not.empty",
									"});",
									"",
									"pm.test('Body request contains keys', function (){",
									"    pm.expect(requestBody).contains.keys(['text', 'rating'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\":\"Very bad not happy with product\",\n\"rating\":2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/review/products/:productId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"review",
								"products",
								":productId",
								""
							],
							"variable": [
								{
									"key": "productId",
									"value": "cfb7a729-6073-474f-a905-c906ae159709"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns reviews of product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['can_rate', 'count', 'next', 'previous', 'results'])",
									"})",
									"",
									"pm.test('results is array', function () {",
									"    pm.expect(jsonData.results).to.be.an('array')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/review/products/:productId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"review",
								"products",
								":productId",
								""
							],
							"variable": [
								{
									"key": "productId",
									"value": "cfb7a729-6073-474f-a905-c906ae159709"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Like to review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'rating', 'author_avatar', 'text', 'author_username', 'likes', 'dislikes', 'created_at', 'model_object'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/reviews/like/:reviewId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"reviews",
								"like",
								":reviewId",
								""
							],
							"variable": [
								{
									"key": "reviewId",
									"value": "{{reviewId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Like from Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'rating', 'author_avatar', 'text', 'author_username', 'likes', 'dislikes', 'created_at', 'model_object'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/reviews/unlike/:reviewId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"reviews",
								"unlike",
								":reviewId",
								""
							],
							"variable": [
								{
									"key": "reviewId",
									"value": "{{reviewId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Dislike to review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'rating', 'author_avatar', 'text', 'author_username', 'likes', 'dislikes', 'created_at', 'model_object'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/reviews/dislike/:reviewId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"reviews",
								"dislike",
								":reviewId",
								""
							],
							"variable": [
								{
									"key": "reviewId",
									"value": "{{reviewId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Dislike from review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'rating', 'author_avatar', 'text', 'author_username', 'likes', 'dislikes', 'created_at', 'model_object'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/reviews/undislike/:reviewId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"reviews",
								"undislike",
								":reviewId",
								""
							],
							"variable": [
								{
									"key": "reviewId",
									"value": "{{reviewId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add rating to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body request is not empty', function () {",
									"    pm.expect(requestBody).is.not.empty",
									"});",
									"",
									"pm.test('Body request contains keys', function (){",
									"    pm.expect(requestBody).contains.keys(['rating'])",
									"});",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'rating', 'overall_rating'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"rating\":\"5\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/rating/users/:userName/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"rating",
								"users",
								":userName",
								""
							],
							"variable": [
								{
									"key": "userName",
									"value": "abiola.rasheed.7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add rating to product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body request is not empty', function () {",
									"    pm.expect(requestBody).is.not.empty",
									"});",
									"",
									"pm.test('Body request contains keys', function (){",
									"    pm.expect(requestBody).contains.keys(['rating'])",
									"});",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'rating', 'overall_rating'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"rating\":\"5\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/rating/products/:productId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"rating",
								"products",
								":productId",
								""
							],
							"variable": [
								{
									"key": "productId",
									"value": "bf738712-6dce-4820-845c-2c2e68046f0e2222"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns average product rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['rating', 'number_of_ratings'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/rating/products/:productId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"rating",
								"products",
								":productId",
								""
							],
							"variable": [
								{
									"key": "productId",
									"value": "bf738712-6dce-4820-845c-2c2e68046f0e2222"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add rating to service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body request is not empty', function () {",
									"    pm.expect(requestBody).is.not.empty",
									"});",
									"",
									"pm.test('Body request contains keys', function (){",
									"    pm.expect(requestBody).contains.keys(['rating'])",
									"});",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['id', 'rating', 'overall_rating'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"rating\":\"5\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/rating/services/:serviceId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"rating",
								"services",
								":serviceId"
							],
							"variable": [
								{
									"key": "serviceId",
									"value": "0abb7970-6e5e-44ae-ac4f-553a4889c4bb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns average service rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									"",
									"pm.test('Body response is not empty', function () {",
									"    pm.expect(jsonData).is.not.empty",
									"});",
									"",
									"pm.test('Body response contains keys', function (){",
									"    pm.expect(jsonData).contains.keys(['rating', 'number_of_ratings'])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/rating/services/:serviceId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"rating",
								"services",
								":serviceId",
								""
							],
							"variable": [
								{
									"key": "serviceId",
									"value": "0abb7970-6e5e-44ae-ac4f-553a4889c4bb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Checks if user can review product/service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"f1f8e8bd-7b86-415f-bd08-3179b4559d1a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/reviews/check-if-user-can-review-product-or-service/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"reviews",
								"check-if-user-can-review-product-or-service",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Checks if user can review seller/provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/reviews/check-if-user-can-review-seller-or-provider/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"reviews",
								"check-if-user-can-review-seller-or-provider",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create reviewable record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/social/reviews/create-reviewable-record/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"social",
								"reviews",
								"create-reviewable-record",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Staff",
			"item": [
				{
					"name": "Returns list of staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/staff/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"staff",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role\": \"Developer\",\n    \"status\": \"Active\",\n    \"user\": \"abiola.rasheed.2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/staff/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"staff",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve staff's details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/staff/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"staff",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "45"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update staff's details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role\": \"Developer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/staff/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"staff",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete staff's details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/staff/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"staff",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "List of transactions endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check account balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/check-account-balance/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"check-account-balance",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/list/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"list",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Make payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_customer\": \"black\",\n    \"to_customer\": \"abiola.rasheed.2\",\n    \"amount\": 246\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/make-payment/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"make-payment",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Make payment for orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"order_id\": 212\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/make-payment-for-orders/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"make-payment-for-orders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of payment categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is object\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"object\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/payment-category/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"payment-category",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns transaction fees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/fees/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"fees",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is object\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"object\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions/transaction-filter/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"transaction-filter",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Terms & Conditions",
			"item": [
				{
					"name": "Get User's T&C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/customer/terms-and-conditions/:username/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"customer",
								"terms-and-conditions",
								":username",
								""
							],
							"variable": [
								{
									"key": "username",
									"value": "black"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User's T&C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/customer/terms-and-conditions/:username/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"customer",
								"terms-and-conditions",
								":username",
								""
							],
							"variable": [
								{
									"key": "username",
									"value": "black"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Preview T&C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/customer/terms-and-conditions/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"customer",
								"terms-and-conditions",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Utility",
			"item": [
				{
					"name": "Update Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/utilities/providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"utilities",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of providers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/utilities/providers/?category=Data Subscription",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"utilities",
								"providers",
								""
							],
							"query": [
								{
									"key": "category",
									"value": "Data Subscription"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve provider's products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"products is array\", function () {",
									"    pm.expect(jsonData.products).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/utilities/providers/:providerId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"utilities",
								"providers",
								":providerId",
								""
							],
							"variable": [
								{
									"key": "providerId",
									"value": "04fe0b4e-23bd-49c2-8087-88a6250373c5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"products is array\", function () {",
									"    pm.expect(jsonData.products).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/utilities/providers/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"utilities",
								"providers",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "c44e0c14-07aa-411f-88b3-2670f932eb05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/utilities/transactions/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"utilities",
								"transactions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/utilities/transactions/:id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"utilities",
								"transactions",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bills Lookup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"provider_id\": 1,\n    \"product_id\": 1,\n    \"customer_ref_num\": \"07029135432\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/utilities/verify-user-account/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"utilities",
								"verify-user-account",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Bill Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 12,\n    \"provider_id\": 1,\n    \"product_id\": 1,\n    \"customer_ref_num\": \"0701248593\",\n    \"order_id\": 1,\n    \"customer_id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/utilities/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"utilities",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Find user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/search/users/?search=username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"search",
								"users",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "username"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/address/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"address",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_line_1\": \"Sheraton Hotel\",\n    \"city\": \"Ikeja\",\n    \"state\": \"Lagos\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/address/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"address",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user's avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/update-avatar/:username/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"update-avatar",
								":username",
								""
							],
							"variable": [
								{
									"key": "username",
									"value": "black"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/update-avatar/:username/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"update-avatar",
								":username",
								""
							],
							"variable": [
								{
									"key": "username",
									"value": "black"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Block user from contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/block-contact/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								"block-contact",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Unblock user from contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/unblock-contact/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								"unblock-contact",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user from contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/remove-from-contact/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								"remove-from-contact",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of contact request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contact-request/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contact-request",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept contact request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contact-request/accept/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contact-request",
								"accept",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel or reject contact request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contact-request/cancel-or-reject/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contact-request",
								"cancel-or-reject",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of blocked users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains keys\", function () {",
									"    pm.expect(jsonData).to.not.be.empty",
									"});",
									"",
									"pm.test(\"results is array\", function () {",
									"    pm.expect(jsonData.results).to.be.an(\"array\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/contacts/list-block-contact/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"contacts",
								"list-block-contact",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Forum",
			"item": [
				{
					"name": "Ask question",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/ask/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ask",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of questions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/ask/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ask",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve question",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/ask/:questionId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ask",
								":questionId",
								""
							],
							"variable": [
								{
									"key": "questionId",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update question",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/ask/:questionId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ask",
								":questionId",
								""
							],
							"variable": [
								{
									"key": "questionId",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete question",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/ask/:questionId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ask",
								":questionId",
								""
							],
							"variable": [
								{
									"key": "questionId",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.slydo.co"
		}
	]
}